<?xml version="1.0" ?>

<database>
	<!-- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -->
	<operator id="" title="Application Services Insert Model" group="DDD" description="">
		<![CDATA[
// ► file(path,content);
// ► model {Name : '', Item : [ {Name : '' , TypeName : ''} ] };
// ► ns = Default Name Space
// ► -----  ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
file(`/Application/Services/${model.Name}/Commands/InsertCommand.cs`,`
using ${ns}.Common.Interfaces;
namespace ${ns}.Application.Service.${model.Name}.Commands.Insert;

public class InsertCommand : ICommand
{
	${model.Items.map(m=>`public ${m.TypeName} ${m.Name} { set; get; } `).join('\n')}
}

public class InsertCommandDto
{
	public bool Result { set; get; }
}
`);	
// ► -----  ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
]]>
	</operator>
	<operator id="" title="Application Services Insert Handler" group="DDD" description="">
		<![CDATA[
// ► file(path,content);
// ► model {Name : '', Item : [ {Name : '' , TypeName : ''} ] };
// ► ns = Default Name Space
// ► -----  ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
file(`/Application/Services/${model.Name}/Commands/InsertCommandHandler.cs`,`
using AutoMapper;
using Devinux.AutoDI;
using ${ns}.Common.Interfaces;

namespace ${ns}.Application.Service.${model.Name}.Commands.Insert;

[DevinuxServiceScope]
public class InsertCommandHandler : ICommandHandler<InsertCommand,InsertCommandDto>
{
	private readonly IMapper mapper;
	private readonly I${model.Name}CommandRepository _cmdRepo;
	public InsertCommandHandler(I${model.Name}CommandRepository cmdRepo,IMapper mapper)
	{
        _cmdRepo = cmdRepo;
        _mapper = mapper;
	}

	public async Task<InsertCommandDto> Handle(InsertCommand cmd , CancellationToken ct)
	{
		var _model = _mapper.Map<Domain.Entities.{model.Name}>(command);
        var result = await _cmdRepo.InsertAsync(_model, ct);
        return new InsertCommandDto() {{ Result = result > 0 }};
	}
}
`);
// ► -----  ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
	
]]>
	</operator>
	<operator id="" title="Application Services Update Model" group="DDD" description="">
		<![CDATA[
// ► file(path,content);
// ► model {Name : '', Item : [ {Name : '' , TypeName : ''} ] };
// ► ns = Default Name Space
// ► -----  ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
file(`/Application/Services/${model.Name}/Commands/UpdateCommand.cs`,`
using ${ns}.Common.Interfaces;
namespace ${ns}.Application.Service.${model.Name}.Commands.Update;

public class UpdateCommand : ICommand
{
	${model.Items.map(m=>`public ${m.TypeName} ${m.Name} { set; get; } `).join('\n')}
}

public class UpdateCommandDto
{
	public bool Result { set; get; }
}
`);	
// ► -----  ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
	
]]>
	</operator>
	<operator id="" title="Application Services Update Handler" group="DDD" description="">
		<![CDATA[
// ► file(path,content);
// ► model {Name : '', Item : [ {Name : '' , TypeName : ''} ] };
// ► ns = Default Name Space
// ► -----  ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
file(`/Application/Services/${model.Name}/Commands/UpdateCommandHandler.cs`,`
using AutoMapper;
using ${ns}.Common.Interfaces;
namespace ${ns}.Application.Service.${model.Name}.Commands.Update;

public class UpdateCommandHandler : ICommandHandler<UpdateCommand,UpdateCommandDto>
{
	private readonly IMapper mapper;
	private readonly I${model.Name}CommandRepository _cmdRepo;
	public UpdateCommandHandler(I${model.Name}CommandRepository cmdRepo,IMapper mapper)
	{
        _cmdRepo = cmdRepo;
        _mapper = mapper;
	}

	public async Task<UpdateCommandDto> Handle(UpdateCommand cmd , CancellationToken ct)
	{
		var _model = _mapper.Map<Domain.Entities.{model.Name}>(command);
        var result = await _cmdRepo.UpdateAsync(_model, ct);
        return new UpdateCommandDto() {{ Result = result > 0 }};
	}
}
`);
// ► -----  ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
		
]]>
	</operator>
	<operator id="" title="Application Services Delete Model" group="DDD" description="">
		<![CDATA[
// ► file(path,content);
// ► model {Name : '', Item : [ {Name : '' , TypeName : ''} ] };
// ► ns = Default Name Space
// ► -----  ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
file(`/Application/Services/${model.Name}/Commands/DeleteCommand.cs`,`
using ${ns}.Common.Interfaces;
namespace ${ns}.Application.Service.${model.Name}.Commands.Delete;

public class DeleteCommand : ICommand
{
	public int Id { set; get; }
}

public class DeleteCommandDto
{
	public bool Result { set; get; }
}
`);	
// ► -----  ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
	
]]>
	</operator>
	<operator id="" title="Application Services Delete Handler" group="DDD" description="">
		<![CDATA[
// ► file(path,content);
// ► model {Name : '', Item : [ {Name : '' , TypeName : ''} ] };
// ► ns = Default Name Space
// ► -----  ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
file(`/Application/Services/${model.Name}/Commands/DeleteCommandHandler.cs`,`
using AutoMapper;
using ${ns}.Common.Interfaces;
namespace ${ns}.Application.Service.${model.Name}.Commands.Delete;

public class DeleteCommandHandler : ICommandHandler<DeleteCommand,DeleteCommandDto>
{
	private readonly IMapper mapper;
	private readonly I${model.Name}CommandRepository _cmdRepo;
	public DeleteCommandHandler(I${model.Name}CommandRepository cmdRepo,IMapper mapper)
	{
        _cmdRepo = cmdRepo;
        _mapper = mapper;
	}

	public async Task<DeleteCommandDto> Handle(DeleteCommand cmd , CancellationToken ct)
	{
        var result = await _cmdRepo.DeleteAsync(model.Id, ct);
        return new DeleteCommandDto() {{ Result = result > 0 }};
	}
}
`);
// ► -----  ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
		
]]>
	</operator>
	<operator id="" title="Application Services Select Model" group="DDD" description="">
		<![CDATA[
// ► file(path,content);
// ► model {Name : '', Item : [ {Name : '' , TypeName : ''} ] };
// ► ns = Default Name Space
// ► -----  ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
file(`/Application/Services/${model.Name}/Queries/SelectQuery.cs`,`
using ${ns}.Common.Interfaces;
namespace ${ns}.Application.Service.${model.Name}.Queries.Select;

public class SelectQuery : IQuery
{
	public int Id { set; get; }
}

public class SelectQueryDto
{
${model.Items.map(m=>`    public ${m.TypeName} ${m.Name} { set; get; } `).join('\n')}
}
`);	
// ► -----  ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
	
]]>
	</operator>
	<operator id="" title="Application Services Select Handler" group="DDD" description="">
		<![CDATA[
// ► file(path,content);
// ► model {Name : '', Item : [ {Name : '' , TypeName : ''} ] };
// ► ns = Default Name Space
// ► -----  ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
file(`/Application/Services/${model.Name}/Queries/SelectQueryHandler.cs`,`
using AutoMapper;
using ${ns}.Common.Interfaces;
namespace ${ns}.Application.Service.${model.Name}.Queries.Select;

public class SelectQueryHandler : IQueryHandler<SelectCommand,SelectCommandDto>
{
	private readonly IMapper mapper;
	private readonly I${model.Name}QueryRepository _qryRepo;
	public SelectQueryHandler(I${model.Name}QueryRepository qryRepo,IMapper mapper)
	{
        _qryRepo = qryRepo;
        _mapper = mapper;
	}

	public async Task<SelectQueryDto> Handle(SelectQuery qry , CancellationToken ct)
	{
        var result = await _qryRepo.SelectAsync(qry.Id, ct);
        return _mapper.Map<SelectQueryDto>(result);
	}
}
`);
// ► -----  ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
		
]]>
	</operator>
	<operator id="" title="Application Services List Model" group="DDD" description="">
		<![CDATA[
// ► file(path,content);
// ► model {Name : '', Item : [ {Name : '' , TypeName : ''} ] };
// ► ns = Default Name Space
// ► -----  ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
file(`/Application/Services/${model.Name}/Queries/ListQuery.cs`,`
using ${ns}.Common.Interfaces;
namespace ${ns}.Application.Service.${model.Name}.Queries.List;

public class ListQuery : IQuery
{
	public int Id { set; get; }
	public int Page { set; get; }
	public int PageSize { set; get; }
}
public class ListQueryDto
{
	public List<ListQueryDtoItem> Data { set; get; }
	public int Count { set; get; }
}
public class ListQueryDtoItem
{
${model.Items.map(m=>`    public ${m.TypeName} ${m.Name} { set; get; } `).join('\n')}
}
`);	
// ► -----  ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
	
]]>
	</operator>
	<operator id="" title="Application Services List Handler" group="DDD" description="">
		<![CDATA[
// ► file(path,content);
// ► model {Name : '', Item : [ {Name : '' , TypeName : ''} ] };
// ► ns = Default Name Space
// ► -----  ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
file(`/Application/Services/${model.Name}/Queries/ListQueryHandler.cs`,`using AutoMapper;
using AutoMapper;
using ${ns}.Common.Interfaces;

namespace ${ns}.Application.Service.${model.Name}.Queries.List;

public class ListQueryHandler : IQueryHandler<ListCommand,ListQueryResultDto>
{
	private readonly IMapper mapper;
	private readonly I${model.Name}QueryRepository _qryRepo;
	public ListQueryHandler(I${model.Name}QueryRepository qryRepo,IMapper mapper)
	{
        _qryRepo = qryRepo;
        _mapper = mapper;
	}

	public async Task<List<ListQueryDto>> Handle(ListQuery qry , CancellationToken ct)
	{
        var result = await _qryRepo.ListAsync(qry.Page, qry.PageSize, ct);
        return new ListQueryResultDto(){Data = result.select(m => _mapper.Map<ListQueryDtoItem>(m)).ToList();
	}
}
`);
// ► -----  ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
		
]]>
	</operator>
	<operator id="" title="Common Application Interfaces ICommand/IQuery Handlers" group="DDD" description="">
		<![CDATA[
// ► file(path,content);
// ► model {Name : '', Item : [ {Name : '' , TypeName : ''} ] };
// ► ns = Default Name Space
// ► -----  ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
file(`/Common/Interfaces/ICommandQuery.cs`,`
namespace ${ns}.Common.Interfaces;

	public interface IQuery { }
	public interface IListQuery : IQuery { }
	public interface ICommand { }
	public interface IQueryHandler<TQuery,TResponse> where TQuery : IQuery { 
		Task<TResponse> Handle(TQuery qry , CancellationToken ct);
	}
	public interface ICommandHandler<TCommand,TResponse> where TCommand : ICommand {
		Task<TResponse> Handle(TCommand cmd, CancellationToken ct);
	}
`);
// ► -----  ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
		
]]>
	</operator>
	<operator id="" title="Common Persistence Interfaces Repository" group="DDD" description="">
		<![CDATA[
// ► file(path,content);
// ► model {Name : '', Item : [ {Name : '' , TypeName : ''} ] };
// ► ns = Default Name Space
// ► -----  ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
file(`/Common/Interfaces/Repositories/${model.Name}/I${model.Name}Repository.cs`,`
namespace ${ns}.Common.Interfaces.${model.Name};

public interface I${model.Name}Repository : IBaseRepository<{model.Name}>
{
     //here you can place other implementations your repository doesn't have
}
`);
// ► -----  ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
		
]]>
	</operator>
	<operator id="" title="Common Persistence Interfaces DatabaseContext" group="DDD" description="">
		<![CDATA[
// ► file(path,content);
// ► model {Name : '', Item : [ {Name : '' , TypeName : ''} ] };
// ► ns = Default Name Space
// ► -----  ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
file(`/Common/Interfaces/IDatabaseContext.cs`,`
using Microsoft.EntityFrameworkCore;
namespace ${ns}.Common.Interfaces;

public interface IDatabaseContext
{
	public DbSet<TEntity> Set<TEntity>() where TEntity : class;
	public DbSet<TEntity> Set<TEntity>(string name) where TEntity : class;
	public int SaveChanges();
	public int SaveChanges(bool acceptAllChangesOnSuccess);
	public Task<int> SaveChangesAsync(bool acceptAllChangesOnSuccess, CancellationToken cancellationToken = default);
	public Task<int> SaveChangesAsync(CancellationToken cancellationToken = default);
}
`);
// ► -----  ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
		
]]>
	</operator>
	<operator id="" title="Common Persistence Generic Interfaces Repository" group="DDD" description="">
		<![CDATA[
// ► file(path,content);
// ► model {Name : '', Item : [ {Name : '' , TypeName : ''} ] };
// ► ns = Default Name Space
// ► -----  ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
file(`/Common/Interfaces/Repositories/IBaseRepository.cs`,`
namespace ${ns}.Persistence.Repositories;

public interface IBaseRepository<TEntity> where TEntity : class
{
    void Add(TEntity objModel);
    void AddRange(IEnumerable<TEntity> objModel);
    TEntity GetId(int id);
    Task<TEntity> GetIdAsync(int id);
    TEntity Get(Expression<Func<TEntity, bool>> predicate);
    Task<TEntity> GetAsync(Expression<Func<TEntity, bool>> predicate);
    IEnumerable<TEntity> GetList(Expression<Func<TEntity, bool>> predicate);
    Task<IEnumerable<TEntity>> GetListAsync(Expression<Func<TEntity, bool>> predicate);
    IEnumerable<TEntity> GetAll();
    Task<IEnumerable<TEntity>> GetAllAsync();
    int Count();
    Task<int> CountAsync();
    void Update(TEntity objModel);
    void Remove(TEntity objModel);
    void Dispose(); 
}`);
// ► -----  ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
		
]]>
	</operator>
	<operator id="" title="Common Application Result" group="DDD" description="">
		<![CDATA[
// ► file(path,content);
// ► model {Name : '', Item : [ {Name : '' , TypeName : ''} ] };
// ► ns = Default Name Space
// ► -----  ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
file(`/Common/Application/Result.cs`,`
namespace ${ns}.Common.Application;

public interface IApplicationResult { }
public class ApplicationResult : IApplicationResult
{
	public static ApplicationResult<T>(T data) => return new ApplicationResult<T>() {Data = data};
	public static ApplicationResult<T>(T data , int count) => return new ApplicationResult<T>() {Data = data , Count = count};
}
public class ApplicationResult<T> : ApplicationResult
{
	public T Data { set; get; }
	public int Count { set; get; }
}
`);
// ► -----  ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
		
]]>
	</operator>
	<operator id="" title="Persistence Generic Repository" group="DDD" description="">
		<![CDATA[
// ► file(path,content);
// ► model {Name : '', Item : [ {Name : '' , TypeName : ''} ] };
// ► ns = Default Name Space
// ► -----  ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----

file(`/Persistence/Repositories/BaseRepository.cs`,`
namespace ${ns}.Persistence.Repositories;

public class BaseRepository<TEntity> : IRepositoryBase<TEntity> where TEntity : class
{
    #region Fields

    protected readonly IDatabaseContext _context = new IDatabaseContext();

    #endregion

    #region Methods

    public void Add(TEntity objModel)
    {
        _context.Set<TEntity>().Add(objModel);
        _context.SaveChanges();
    }

    public void AddRange(IEnumerable<TEntity> objModel)
    {
        _context.Set<TEntity>().AddRange(objModel);
        _context.SaveChanges();
    }

    public TEntity GetId(int id)
    {
        return _context.Set<TEntity>().Find(id);
    }

    public async Task<TEntity> GetIdAsync(int id)
    {
        return await _context.Set<TEntity>().FindAsync(id);
    }

    public TEntity Get(Expression<Func<TEntity, bool>> predicate)
    {
        return _context.Set<TEntity>().FirstOrDefault(predicate);
    }

    public async Task<TEntity> GetAsync(Expression<Func<TEntity, bool>> predicate)
    {
        return await _context.Set<TEntity>().FirstOrDefaultAsync(predicate);
    }

    public IEnumerable<TEntity> GetList(Expression<Func<TEntity, bool>> predicate)
    {
        return _context.Set<TEntity>().Where<TEntity>(predicate).ToList();
    }

    public async Task<IEnumerable<TEntity>> GetListAsync(Expression<Func<TEntity, bool>> predicate)
    {
        return await Task.Run(() =>
            _context.Set<TEntity>().Where<TEntity>(predicate));
    }

    public IEnumerable<TEntity> GetAll()
    {
        return _context.Set<TEntity>().ToList();
    }

    public async Task<IEnumerable<TEntity>> GetAllAsync()
    {
        return await Task.Run(() => _context.Set<TEntity>());
    }

    public int Count()
    {
        return _context.Set<TEntity>().Count();
    }

    public async Task<int> CountAsync()
    {
        return await _context.Set<TEntity>().CountAsync();
    }

    public void Update(TEntity objModel)
    {
        _context.Entry(objModel).State = EntityState.Modified;
        _context.SaveChanges();
    }

    public void Remove(TEntity objModel)
    {
        _context.Set<TEntity>().Remove(objModel);
        _context.SaveChanges();
    }

    public void Dispose()
    {
        _context.Dispose();
    }

    #endregion
}
`);
// ► -----  ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
		
]]>
	</operator>
	<operator id="" title="Persistence Repositories" group="DDD" description="">
		<![CDATA[
// ► file(path,content);
// ► model {Name : '', Item : [ {Name : '' , TypeName : ''} ] };
// ► ns = Default Name Space
// ► -----  ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
file(`/Persistence/Repositories/${model.Name}/${model.Name}CommandRepository.cs`,`
using Devinux.AutoDI;
namespace ${ns}.Persistence.Repositories.${model.Name};

[DevinuxServiceScope]
public class ${model.Name}CommandRepository : I${model.Name}CommandRepository
{
	private readonly IDatabaseContext _db;
	public ${model.Name}CommandRepository(IDatabaseContext db) { _db = db; }
	public async Task<int> InsertAsync(${model.Name} cmd, CancellationToken ct)
	{
	}
	public async Task<int> UpdateAsync(${model.Name} cmd, CancellationToken ct)
	{
	}
	public async Task<int> DeleteAsync(${model.Name} cmd, CancellationToken ct)
	{
	}
}
`);
file(`/Persistence/Repositories/${model.Name}/${model.Name}QueryRepository.cs`,`
namespace ${ns}.Persistence.Repositories.${model.Name};
public class ${model.Name}QueryRepository : I${model.Name}QueryRepository 
{ 
	private readonly IDatabaseContext _db;
	public ${model.Name}QueryRepository(IDatabaseContext db) { _db = db; }
	public async Task<${model.Name}> SelectAsync(int Id, CancellationToken ct)
	{
		return _db.${model.Name}.Where(m => m.Id == Id).FirstOfDefault();
	}
	public async Task<KeyValuePair<int,List<${model.Name}>>> ListAsync(CancellationToken ct)
	{
		var q = _db.${model.Name};
		rewturn new KeyValuePair<int,List<${model.Name}>>(q.Count(),q.ToList());
	}
}
`);
// ► -----  ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
		
]]>
	</operator>
</database>