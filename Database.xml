<?xml version="1.0" ?>

<database>
	<operator id="" title="Application Services Insert Model" group="Devinux Clean" description="" base="application">
		<![CDATA[
// ► file(path,content);
// ► model {Name : '', Item : [ {Name : '' , TypeName : ''} ] };
// ► ns = Default Name Space
// ► -----  ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
file(`/Services/${model.Name}/Commands/Insert/InsertCommand.cs`,`
using ${ns}.Application.Interfaces;
namespace ${ns}.Application.Service.${model.Name}.Commands.Insert;

public class InsertCommand : ICommand
{
	${model.Items.map(m=>`public ${m.TypeName} ${m.Name} { set; get; } `).join('\n')}
}

public class InsertCommandDto
{
	public bool Result { set; get; }
}
`);	
// ► -----  ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
]]>
	</operator>
	<operator id="" title="Application Services Insert Handler" group="Devinux Clean" description="" base="application">
		<![CDATA[
// ► file(path,content);
// ► model {Name : '', Item : [ {Name : '' , TypeName : ''} ] };
// ► ns = Default Name Space
// ► -----  ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
file(`/Services/${model.Name}/Commands/Insert/InsertCommandHandler.cs`,`
using AutoMapper;
using Devinux.AutoDI;
using ${ns}.Application.Interfaces;
using ${ns}.Application.Models;
using ${ns}.Domain.Interfaces.Repositories.${model.Name};


namespace ${ns}.Application.Service.${model.Name}.Commands.Insert;

[DevinuxServiceScope]
public class InsertCommandHandler : ICommandHandler<InsertCommand,InsertCommandDto>
{
	private readonly IMapper _mapper;
	private readonly I${model.Name}Repository _cmdRepo;
	public InsertCommandHandler(I${model.Name}Repository cmdRepo,IMapper mapper)
	{
        _cmdRepo = cmdRepo;
        _mapper = mapper;
	}

	public async Task<IApplicationResult<InsertCommandDto>> Handle(InsertCommand cmd , CancellationToken ct)
	{
		var _model = _mapper.Map<Domain.Entities.${model.Name}>(cmd);
        _cmdRepo.Add(_model);
        return new ApplicationResult<InsertCommandDto>(new InsertCommandDto() { Result = true });
	}
}
`);
// ► -----  ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
	
]]>
	</operator>
	<operator id="" title="Application Services Update Model" group="Devinux Clean" description="" base="application">
		<![CDATA[
// ► file(path,content);
// ► model {Name : '', Item : [ {Name : '' , TypeName : ''} ] };
// ► ns = Default Name Space
// ► -----  ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
file(`/Services/${model.Name}/Commands/Update/UpdateCommand.cs`,`
using ${ns}.Application.Interfaces;

namespace ${ns}.Application.Service.${model.Name}.Commands.Update;

public class UpdateCommand : ICommand
{
	public int Id { set; get; }
	${model.Items.map(m=>`public ${m.TypeName} ${m.Name} { set; get; } `).join('\n')}
}

public class UpdateCommandDto
{
	public bool Result { set; get; }
}
`);	
// ► -----  ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
	
]]>
	</operator>
	<operator id="" title="Application Services Update Handler" group="Devinux Clean" description="" base="application">
		<![CDATA[
// ► file(path,content);
// ► model {Name : '', Item : [ {Name : '' , TypeName : ''} ] };
// ► ns = Default Name Space
// ► -----  ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
file(`/Services/${model.Name}/Commands/Update/UpdateCommandHandler.cs`,`
using AutoMapper;
using Devinux.AutoDI;
using ${ns}.Application.Interfaces;
using ${ns}.Application.Models;
using ${ns}.Domain.Interfaces.Repositories.${model.Name};


namespace ${ns}.Application.Service.${model.Name}.Commands.Update;

[DevinuxServiceScope]
public class UpdateCommandHandler : ICommandHandler<UpdateCommand,UpdateCommandDto>
{
	private readonly IMapper _mapper;
	private readonly I${model.Name}Repository _cmdRepo;
	public UpdateCommandHandler(I${model.Name}Repository cmdRepo,IMapper mapper)
	{
        _cmdRepo = cmdRepo;
        _mapper = mapper;
	}

	public async Task<IApplicationResult<UpdateCommandDto>> Handle(UpdateCommand cmd , CancellationToken ct)
	{
		var _model = _cmdRepo.GetId(cmd.Id);
		if (_model == null) throw new Exception("Record Not Found");
${model.Items.map(m=>`if (cmd.${m.Name} != null ) _model.${m.Name} = cmd.${m.Name};`).join('\n')}
        _cmdRepo.Update(_model);
		return new ApplicationResult<UpdateCommandDto>(new UpdateCommandDto() { Result = true });
	}
}
`);
// ► -----  ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
		
]]>
	</operator>
	<operator id="" title="Application Services Delete Model" group="Devinux Clean" description="" base="application">
		<![CDATA[
// ► file(path,content);
// ► model {Name : '', Item : [ {Name : '' , TypeName : ''} ] };
// ► ns = Default Name Space
// ► -----  ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
file(`/Services/${model.Name}/Commands/Delete/DeleteCommand.cs`,`
using ${ns}.Application.Interfaces;

namespace ${ns}.Application.Service.${model.Name}.Commands.Delete;

public class DeleteCommand : ICommand
{
	public int Id { set; get; }
}

public class DeleteCommandDto
{
	public bool Result { set; get; }
}
`);	
// ► -----  ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
	
]]>
	</operator>
	<operator id="" title="Application Services Delete Handler" group="Devinux Clean" description="" base="application">
		<![CDATA[
// ► file(path,content);
// ► model {Name : '', Item : [ {Name : '' , TypeName : ''} ] };
// ► ns = Default Name Space
// ► -----  ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
file(`/Services/${model.Name}/Commands/Delete/DeleteCommandHandler.cs`,`
using AutoMapper;
using Devinux.AutoDI;
using ${ns}.Application.Interfaces;
using ${ns}.Application.Models;
using ${ns}.Domain.Interfaces.Repositories.${model.Name};



namespace ${ns}.Application.Service.${model.Name}.Commands.Delete;

[DevinuxServiceScope]
public class DeleteCommandHandler : ICommandHandler<DeleteCommand,DeleteCommandDto>
{
	private readonly IMapper _mapper;
	private readonly I${model.Name}Repository _cmdRepo;
	public DeleteCommandHandler(I${model.Name}Repository cmdRepo,IMapper mapper)
	{
        _cmdRepo = cmdRepo;
        _mapper = mapper;
	}

	public async Task<IApplicationResult<DeleteCommandDto>> Handle(DeleteCommand cmd , CancellationToken ct)
	{
        var _model = _cmdRepo.GetId(cmd.Id);
		if (_model == null) throw new Exception("Record Not Found");
        _cmdRepo.Remove(_model);
        return  new ApplicationResult<DeleteCommandDto>(new DeleteCommandDto() { Result = true });
	}
}
`);
// ► -----  ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
		
]]>
	</operator>
	<operator id="" title="Application Services Select Model" group="Devinux Clean" description="" base="application">
		<![CDATA[
// ► file(path,content);
// ► model {Name : '', Item : [ {Name : '' , TypeName : ''} ] };
// ► ns = Default Name Space
// ► -----  ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
file(`/Services/${model.Name}/Queries/Select/SelectQuery.cs`,`
using ${ns}.Application.Interfaces;

namespace ${ns}.Application.Service.${model.Name}.Queries.Select;

public class SelectQuery : IQuery
{
	public int Id { set; get; }
}

public class SelectQueryDto
{
${model.Items.map(m=>`    public ${m.TypeName} ${m.Name} { set; get; } `).join('\n')}
}
`);	
// ► -----  ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
	
]]>
	</operator>
	<operator id="" title="Application Services Select Handler" group="Devinux Clean" description="" base="application">
		<![CDATA[
// ► file(path,content);
// ► model {Name : '', Item : [ {Name : '' , TypeName : ''} ] };
// ► ns = Default Name Space
// ► -----  ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
file(`/Services/${model.Name}/Queries/Select/SelectQueryHandler.cs`,`
using AutoMapper;
using Devinux.AutoDI;
using ${ns}.Application.Interfaces;
using ${ns}.Application.Models;
using ${ns}.Domain.Interfaces.Repositories.${model.Name};



namespace ${ns}.Application.Service.${model.Name}.Queries.Select;

[DevinuxServiceScope]
public class SelectQueryHandler : IQueryHandler<SelectQuery,SelectQueryDto>
{
	private readonly IMapper _mapper;
	private readonly I${model.Name}Repository _qryRepo;
	public SelectQueryHandler(I${model.Name}Repository qryRepo,IMapper mapper)
	{
        _qryRepo = qryRepo;
        _mapper = mapper;
	}

	public async Task<IApplicationResult<SelectQueryDto>> Handle(SelectQuery qry , CancellationToken ct)
	{
        var result = _qryRepo.GetId(qry.Id);
        return new ApplicationResult<SelectQueryDto>(_mapper.Map<SelectQueryDto>(result));
	}
}
`);
// ► -----  ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
		
]]>
	</operator>
	<operator id="" title="Application Services List Model" group="Devinux Clean" description="" base="application">
		<![CDATA[
// ► file(path,content);
// ► model {Name : '', Item : [ {Name : '' , TypeName : ''} ] };
// ► ns = Default Name Space
// ► -----  ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
file(`/Services/${model.Name}/Queries/List/ListQuery.cs`,`
using ${ns}.Application.Interfaces;

namespace ${ns}.Application.Service.${model.Name}.Queries.List;

public class ListQuery : PaginationQuery , IQuery
{
	public string SearchText{ set; get; } = "";
}
public class ListQueryDto
{
${model.Items.map(m=>`    public ${m.TypeName} ${m.Name} { set; get; } `).join('\n')}
}
`);	
// ► -----  ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
	
]]>
	</operator>
	<operator id="" title="Application Services List Handler" group="Devinux Clean" description="" base="application">
		<![CDATA[
// ► file(path,content);
// ► model {Name : '', Item : [ {Name : '' , TypeName : ''} ] };
// ► ns = Default Name Space
// ► -----  ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
file(`/Services/${model.Name}/Queries/List/ListQueryHandler.cs`,`using AutoMapper;
using AutoMapper;
using Devinux.AutoDI;
using ${ns}.Application.Interfaces;
using ${ns}.Application.Models;
using ${ns}.Domain.Interfaces.Repositories.${model.Name};

namespace ${ns}.Application.Service.${model.Name}.Queries.List;

[DevinuxServiceScope]
public class ListQueryHandler : IQueryHandler<ListQuery,List<ListQueryDto>>
{
	private readonly IMapper _mapper;
	private readonly I${model.Name}Repository _qryRepo;
	public ListQueryHandler(I${model.Name}Repository qryRepo,IMapper mapper)
	{
        _qryRepo = qryRepo;
        _mapper = mapper;
	}

	public async Task<IApplicationResult<List<ListQueryDto>>> Handle(ListQuery qry , CancellationToken ct)
	{
		var allCount = _qryRepo.GetListCount(null);
        var result = await _qryRepo.GetPagedListAsync(null, qry.Page, qry.PageSize);
		return new ApplicationResult<List<ListQueryDto>>(result.Select(m => _mapper.Map<ListQueryDto>(m)).ToList(), allCount);
	}
}
`);
// ► -----  ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
		
]]>
	</operator>
	
	<operator id="" title="Application Mapper Class" group="Devinux Clean" description="" base="application">
		<![CDATA[
// ► file(path,content);
// ► model {Name : '', Item : [ {Name : '' , TypeName : ''} ] };
// ► ns = Default Name Space
// ► -----  ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
file(`/Mapper/${model.Name}Mapper.cs`,
`
using AutoMapper;
using ${ns}.Application.Service.${model.Name}.Commands.Insert;
using ${ns}.Application.Service.${model.Name}.Commands.Update;
using ${ns}.Application.Service.${model.Name}.Queries.List;
using ${ns}.Application.Service.${model.Name}.Queries.Select;
using ${ns}.Domain.Entities;

namespace ${ns}.Application.Mapper
{
    public class ${model.Name}Mapper : Profile
    {
        public ${model.Name}Mapper()
        {
            this.CreateMap<${model.Name}, InsertCommand>().ReverseMap();
            this.CreateMap<${model.Name}, UpdateCommand>().ReverseMap();
            this.CreateMap<${model.Name}, SelectQueryDto>().ReverseMap();
            this.CreateMap<${model.Name}, ListQueryDto>().ReverseMap();
        }
    }
}

`);
// ► -----  ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
		
]]>
	</operator>
	<operator id="" title="Application Interfaces ICommand/IQuery Handlers" group="Framework" description="" base="application">
		<![CDATA[
// ► file(path,content);
// ► model {Name : '', Item : [ {Name : '' , TypeName : ''} ] };
// ► ns = Default Name Space
// ► -----  ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
file(`/Interfaces/ICommandQuery.cs`,`
namespace ${ns}.Application.Interfaces;

public interface IQuery { }
public interface ICommand { }
public interface IQueryHandler<TQuery, TResponse> where TQuery : IQuery
{
    Task<IApplicationResult<TResponse>> Handle(TQuery qry, CancellationToken ct);
}
public interface ICommandHandler<TCommand, TResponse> where TCommand : ICommand
{
    Task<IApplicationResult<TResponse>> Handle(TCommand cmd, CancellationToken ct);
}

`);
// ► -----  ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
		
]]>
	</operator>
	<operator id="" title="Application Interfaces IPagination" group="Framework" description=""  base="application">
		<![CDATA[
// ► file(path,content);
// ► model {Name : '', Item : [ {Name : '' , TypeName : ''} ] };
// ► ns = Default Name Space
// ► -----  ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
file(`/Interfaces/IPagination.cs`,`
namespace ${ns}.Application.Interfaces;

public interface IPagination { 
	public int Page { set; get; }
	public int PageSize { set; get; }
}
public class PaginationQuery : IPagination
{
	public int Page { get; set; } = 1;
	public int PageSize { get; set; } = 20;
}
`);
// ► -----  ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
		
]]>
	</operator>
	<operator id="" title="Domain Interfaces Repository" group="Devinux Clean" description="" base="domain">
		<![CDATA[
// ► file(path,content);
// ► model {Name : '', Item : [ {Name : '' , TypeName : ''} ] };
// ► ns = Default Name Space
// ► -----  ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
file(`/Interfaces/Repositories/${model.Name}/I${model.Name}Repository.cs`,`
namespace ${ns}.Domain.Interfaces.Repositories.${model.Name};

public interface I${model.Name}Repository : IBaseRepository<Domain.Entities.${model.Name}>
{
     //here you can place other implementations your repository doesn't have
}
`);
// ► -----  ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
		
]]>
	</operator>
	<operator id="" title="Domain Interfaces DatabaseContext" group="Framework" description="" base="domain">
		<![CDATA[
// ► file(path,content);
// ► model {Name : '', Item : [ {Name : '' , TypeName : ''} ] };
// ► ns = Default Name Space
// ► -----  ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
file(`/Interfaces/IDatabaseContext.cs`,`
using Microsoft.EntityFrameworkCore;
namespace ${ns}.Domain.Interfaces;

public interface IDatabaseContext : IDisposable
{
        public DbSet<TEntity> Set<TEntity>() where TEntity : class;
        public DbSet<TEntity> Set<TEntity>(string name) where TEntity : class;
        public int SaveChanges();
        public int SaveChanges(bool acceptAllChangesOnSuccess);
        public Task<int> SaveChangesAsync(bool acceptAllChangesOnSuccess, CancellationToken cancellationToken = default);
        public Task<int> SaveChangesAsync(CancellationToken cancellationToken = default);
        public EntityEntry Entry(object entity);
        public EntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class;

`);
// ► -----  ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
		
]]>
	</operator>
	<operator id="" title="Domain Interfaces Base Repository" group="Framework" description="" base="domain">
		<![CDATA[
// ► file(path,content);
// ► model {Name : '', Item : [ {Name : '' , TypeName : ''} ] };
// ► ns = Default Name Space
// ► -----  ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
file(`/Interfaces/IBaseRepository.cs`,`
using System.Linq.Expressions;

namespace ${ns}.Domain.Interfaces;

public interface IBaseRepository<TEntity> where TEntity : class
{
    void Add(TEntity objModel);
    void AddRange(IEnumerable<TEntity> objModel);
    TEntity GetId(int id);
    Task<TEntity> GetIdAsync(int id);
    TEntity Get(Expression<Func<TEntity, bool>> predicate);
    Task<TEntity> GetAsync(Expression<Func<TEntity, bool>> predicate);
    IEnumerable<TEntity> GetList(Expression<Func<TEntity, bool>> predicate = null);
    Task<IEnumerable<TEntity>> GetListAsync(Expression<Func<TEntity, bool>> predicate = null);
    IEnumerable<TEntity> GetPagedList(Expression<Func<TEntity, bool>> predicate = null, int pageindex = 1, int pagesize = 20);
    Task<IEnumerable<TEntity>> GetPagedListAsync(Expression<Func<TEntity, bool>> predicate = null, int pageindex = 1, int pagesize = 20);
	int GetListCount(Expression<Func<TEntity, bool>> predicate = null);
    IEnumerable<TEntity> GetAll();
    Task<IEnumerable<TEntity>> GetAllAsync();
    int Count();
    Task<int> CountAsync();
    void Update(TEntity objModel);
    void Remove(TEntity objModel);
    void Dispose(); 
}
`);
// ► -----  ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
		
]]>
	</operator>
	
	<operator id="" title="Application Result" group="Framework" description="" base="application">
		<![CDATA[
// ► file(path,content);
// ► model {Name : '', Item : [ {Name : '' , TypeName : ''} ] };
// ► ns = Default Name Space
// ► -----  ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
file(`/Interfaces/IApplicationResult.cs`,`
namespace ${ns}.Application.Interfaces;

public interface IApplicationResult<T>
{
    T Data { set; get; }
    int Count { set; get; }
}
`);
// ► -----  ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
file(`/Models/ApplicationResult.cs`,`
namespace ${ns}.Application.Models;

public class ApplicationResult<T> : IApplicationResult
{
    public ApplicationResult(T data ) { Data = data; }
    public ApplicationResult(T data , int count) { Data = data; Count = count; }
    public T Data { set; get; }
	public int Count { set; get; }
}
`);
// ► -----  ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
		
]]>
	</operator>
	<operator id="" title="Application Action Result" group="Framework" description="" base="application">
		<![CDATA[
// ► file(path,content);
// ► model {Name : '', Item : [ {Name : '' , TypeName : ''} ] };
// ► ns = Default Name Space
// ► -----  ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
file(`/Models/ActionResult.cs`,`
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using Newtonsoft.Json.Serialization;

namespace ${ns}.Application.Models;


public enum PronodeActionResultStatusType
{
    Success = 1, Error = 2
}
public class PronodeActionResult : IActionResult
{
    public PronodeActionResult(PronodeActionResultStatusType status, object data, string msg = "")
    {
        Status = status;
        Data = data;
        Message = msg;
    }
    public PronodeActionResultStatusType Status { set; get; }
    public object Data { set; get; }
    public string Message { set; get; } = "";
    public async Task ExecuteResultAsync(ActionContext context)
    {
        await HttpContextAsync(context.HttpContext);
        //return Task.CompletedTask;
    }
    public async Task HttpContextAsync(HttpContext context)
    {
        var str = JsonConvert.SerializeObject(new { @status = Status, @data = Data, @msg = Message }, Formatting.None, new JsonSerializerSettings
        {
            ContractResolver = new CamelCasePropertyNamesContractResolver(),
            PreserveReferencesHandling = PreserveReferencesHandling.None,
            Formatting = Formatting.None
        });
        var r = context.Response;
        r.ContentType = "application/json";
        await r.WriteAsync(str);
        //return Task.CompletedTask;
    }

    public static PronodeActionResult Success(object data) => new PronodeActionResult(PronodeActionResultStatusType.Success, data);
    public static PronodeActionResult Error(string msg) => new PronodeActionResult(PronodeActionResultStatusType.Error, null, msg);
    public static PronodeActionResult Exception(Exception ex) => new PronodeActionResult(PronodeActionResultStatusType.Error, ex.StackTrace, ex.Message);
}
	
// ► -----  ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
`);
]]>
	</operator>
	<operator id="" title="Application CQRS Bus Service and Interfaces" group="Framework" description="" base="application">
		<![CDATA[
// ► file(path,content);
// ► model {Name : '', Item : [ {Name : '' , TypeName : ''} ] };
// ► ns = Default Name Space
// ► -----  ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
file(`/Interfaces/ICommandQueryBus.cs`,`
namespace ${ns}.Application.Interfaces
{
    public interface IQueryBus
    {
        Task<IApplicationResult<TResult>> RunService<TQuery, TResult>(TQuery r, CancellationToken c = default) where TQuery : IQuery;
    }
    public interface ICommandBus
    {
        Task<IApplicationResult<TResult>> RunService<TCommand, TResult>(TCommand r, CancellationToken c = default) where TCommand : ICommand;
    }
}

`);
// ► -----  ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
file(`/Services/CommandQueryBus.cs`,`

using Devinux.AutoDI;
using Microsoft.Extensions.DependencyInjection;
using ${ns}.Application.Interfaces;

namespace ${ns}.Application.Services
{

    [DevinuxServiceScope(Devinux.AutoDI.Enums.DevinuxServiceScopeType.Singleton)]
    public class QueryBus : IQueryBus
    {
        private readonly IServiceProvider _sp;
        public QueryBus(IServiceProvider sp)
        {
            _sp = sp;
        }
        public async Task<IApplicationResult<TResult>> RunService<TQuery, TResult>(TQuery r, CancellationToken c = default) where TQuery : IQuery
        {
            var s = _sp.CreateScope().ServiceProvider.GetRequiredService<IQueryHandler<TQuery, TResult>>();
            return await s.Handle(r, c);
        }
    }

    [DevinuxServiceScope(Devinux.AutoDI.Enums.DevinuxServiceScopeType.Singleton)]
    public class CommandBus : ICommandBus
    {
        private readonly IServiceProvider _sp;
        public CommandBus(IServiceProvider sp)
        {
            _sp = sp;
        }
        public async Task<IApplicationResult<TResult>> RunService<TCommand, TResult>(TCommand r, CancellationToken c = default) where TCommand : ICommand
        {
            var s = _sp.CreateScope().ServiceProvider.GetRequiredService<ICommandHandler<TCommand, TResult>>();
            return await s.Handle(r, c);
        }
    }
}

	
// ► -----  ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
`);
]]>
	</operator>
	
	<operator id="" title="Persistence Base Repository" group="Framework" description="" base="persistence">
		<![CDATA[
// ► file(path,content);
// ► model {Name : '', Item : [ {Name : '' , TypeName : ''} ] };
// ► ns = Default Name Space
// ► -----  ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----

file(`/Repositories/BaseRepository.cs`,`

using Microsoft.EntityFrameworkCore;
using ${ns}.Common.Interfaces;
using System.Linq.Expressions;

namespace ${ns}.Persistence.Repositories;

public class BaseRepository<TEntity> : IBaseRepository<TEntity> where TEntity : class
{
    #region Fields

    protected readonly IDatabaseContext _context;

    #endregion

    #region Methods

    public void Add(TEntity objModel)
    {
        _context.Set<TEntity>().Add(objModel);
        _context.SaveChanges();
    }

    public void AddRange(IEnumerable<TEntity> objModel)
    {
        _context.Set<TEntity>().AddRange(objModel);
        _context.SaveChanges();
    }

    public TEntity GetId(int id)
    {
        return _context.Set<TEntity>().Find(id);
    }

    public async Task<TEntity> GetIdAsync(int id)
    {
        return await _context.Set<TEntity>().FindAsync(id);
    }

    public TEntity Get(Expression<Func<TEntity, bool>> predicate)
    {
        return _context.Set<TEntity>().FirstOrDefault(predicate);
    }

    public async Task<TEntity> GetAsync(Expression<Func<TEntity, bool>> predicate)
    {
        return await _context.Set<TEntity>().FirstOrDefaultAsync(predicate);
    }
    public IEnumerable<TEntity> GetList(Expression<Func<TEntity, bool>> predicate = null)
    {
        if (predicate == null) _context.Set<TEntity>().ToList();
        return _context.Set<TEntity>().Where<TEntity>(predicate).ToList();
    }
    public async Task<IEnumerable<TEntity>> GetListAsync(Expression<Func<TEntity, bool>> predicate = null)
    {
        return await Task.Run(() => GetList(predicate));
    }
    public IEnumerable<TEntity> GetPagedList(Expression<Func<TEntity, bool>> predicate = null, int pageindex = 1, int pagesize = 20) {
        var q = _context.Set<TEntity>().AsQueryable();
        if (predicate != null) q = q.Where<TEntity>(predicate);
        if (pageindex > 1) return q.Skip((pageindex - 1) * pagesize).Take(pagesize).ToList();
        else return q.Take(pagesize).ToList();
    }
    public async Task<IEnumerable<TEntity>> GetPagedListAsync(Expression<Func<TEntity, bool>> predicate = null, int pageindex = 1, int pagesize = 20) {

        return await Task.Run(() => {
           return GetPagedList(predicate, pageindex, pagesize);
        });
    }
	public int GetListCount(Expression<Func<TEntity, bool>> predicate = null)
    {
        var s = _context.Set<TEntity>();
        return (predicate == null) ? s.Count() : s.Where(predicate).Count();
    }

    public IEnumerable<TEntity> GetAll()
    {
        return _context.Set<TEntity>().ToList();
    }

    public async Task<IEnumerable<TEntity>> GetAllAsync()
    {
        return await Task.Run(() => _context.Set<TEntity>());
    }

    public int Count()
    {
        return _context.Set<TEntity>().Count();
    }

    public async Task<int> CountAsync()
    {
        return await _context.Set<TEntity>().CountAsync();
    }

    public void Update(TEntity objModel)
    {
        _context.Entry(objModel).State = EntityState.Modified;
        _context.SaveChanges();
    }

    public void Remove(TEntity objModel)
    {
        _context.Set<TEntity>().Remove(objModel);
        _context.SaveChanges();
    }

    public void Dispose()
    {
        _context.Dispose();
    }

    #endregion
}
`);
// ► -----  ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
		
]]>
	</operator>
	<operator id="" title="Persistence Repositories" group="Devinux Clean" description="" base="persistence">
		<![CDATA[
// ► file(path,content);
// ► model {Name : '', Item : [ {Name : '' , TypeName : ''} ] };
// ► ns = Default Name Space
// ► -----  ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
file(`/Repositories/${model.Name}/${model.Name}CommandRepository.cs`,`
using Devinux.AutoDI;
using ${ns}.Domain.Interfaces;
using ${ns}.Domain.Interfaces.Repositories.${model.Name};

namespace ${ns}.Persistence.Repositories.${model.Name};

[DevinuxServiceScope]
public class ${model.Name}CommandRepository : BaseRepository<Domain.Entities.${model.Name}>, I${model.Name}Repository
{
	public ${model.Name}CommandRepository(IDatabaseContext db) : base(db)
	{
	}
}
`);
file(`/Repositories/${model.Name}/${model.Name}QueryRepository.cs`,`
using Devinux.AutoDI;
using ${ns}.Domain.Interfaces;
using ${ns}.Domain.Interfaces.Repositories.${model.Name};

namespace ${ns}.Persistence.Repositories.${model.Name};

[DevinuxServiceScope]
public class ${model.Name}QueryRepository : BaseRepository<Domain.Entities.${model.Name}>, I${model.Name}Repository
{ 
	public ${model.Name}QueryRepository(IDatabaseContext db) : base(db)
	{
	}
}
`);
// ► -----  ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
		
]]>
	</operator>
	
	<operator id="" title="Domain Base Entity" group="Framework" description="" base="domain">
		<![CDATA[
// ► file(path,content);
// ► model {Name : '', Item : [ {Name : '' , TypeName : ''} ] };
// ► ns = Default Name Space
// ► -----  ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
file(`/Domain/Base/BaseEntity.cs`,`

using System.ComponentModel.DataAnnotations;

namespace ${ns}.Domain.Base
{
    public abstract class BaseEntity
    {
        [Key]
        public int Id { get; set; }
		public DateTime CreatedDate { set; get; } = DateTime.Now;
        public bool SoftDelete { set; get; } = false;
    }
}



`);
// ► -----  ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
		
]]>
	</operator>
	
	<operator id="" title="Endpoint Base Controller" group="Framework" description="" base="endpoint">
		<![CDATA[
// ► file(path,content);
// ► model {Name : '', Item : [ {Name : '' , TypeName : ''} ] };
// ► ns = Default Name Space
// ► -----  ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
file(`/Controller/_BaseController.cs`,`

using AutoMapper;
using Devinux.AutoDI.Interfaces;
using Microsoft.AspNetCore.Mvc;
using ${ns}.Application.Interfaces;
using ${ns}.Domain.Interfaces;

namespace ${ns}.Controllers
{
    [ApiController]
    [Route("[controller]")]
    public class BaseController : ControllerBase
    {
        public readonly IDevinuxCommandServiceRunner cbus;
        public readonly IDevinuxQueryServiceRunner qbus;
        public readonly IMapper mapper;
        public BaseController(IDevinuxCommandServiceRunner cb , IDevinuxQueryServiceRunner qb , IMapper _mapper)
        {
            mapper = _mapper;
            qbus = qb;
            cbus = cb;
        }
    }
}




`);
// ► -----  ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
		
]]>
	</operator>
	<operator id="" title="Endpoint Controller" group="Devinux Clean" description="" base="endpoint">
		<![CDATA[
// ► file(path,content);
// ► model {Name : '', Item : [ {Name : '' , TypeName : ''} ] };
// ► ns = Default Name Space
// ► -----  ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
file(`/Controllers/${model.Name}Controller.cs`,`




using AutoMapper;
using Microsoft.AspNetCore.Mvc;
using ${ns}.Application.Interfaces;
using ${ns}.Application.Models;
using ${ns}.Application.Service.${model.Name}.Commands.Insert;
using ${ns}.Application.Service.${model.Name}.Commands.Update;
using ${ns}.Application.Service.${model.Name}.Commands.Delete;
using ${ns}.Application.Service.${model.Name}.Queries.Select;
using ${ns}.Application.Service.${model.Name}.Queries.List;

namespace ${ns}.Controllers
{
    public class ${model.Name}Controller : BaseController
    {
        public ${model.Name}Controller(ICommandBus cb, IQueryBus qb, IMapper _mapper) : base(cb, qb, _mapper)
        {
        }
        [HttpGet]
        public async Task<IActionResult> Select([FromQuery] SelectQuery qry, CancellationToken cancellationToken)
        {
            return ${ns}ActionResult.Success((await qbus.RunService<SelectQuery, SelectQueryDto>(qry, cancellationToken)));
        }
        [HttpPost]
        public async Task<IActionResult> List([FromBody] ListQuery qry, CancellationToken cancellationToken)
        {
            return ${ns}ActionResult.Success(await qbus.RunService<ListQuery, List<ListQueryDto>>(qry, cancellationToken));
        }
        [HttpPost]
        public async Task<IActionResult> Insert([FromBody] InsertCommand cmd, CancellationToken cancellationToken)
        {
            return ${ns}ActionResult.Success(await cbus.RunService<InsertCommand, InsertCommandDto>(cmd, cancellationToken));
        }
        [HttpPut]
        public async Task<IActionResult> Update([FromBody] UpdateCommand cmd, CancellationToken cancellationToken)
        {
            return ${ns}ActionResult.Success(await cbus.RunService<UpdateCommand, UpdateCommandDto>(cmd, cancellationToken));
        }
        [HttpDelete]
        public async Task<IActionResult> Delete([FromBody] DeleteCommand cmd, CancellationToken cancellationToken)
        {
            return ${ns}ActionResult.Success(await cbus.RunService<DeleteCommand, DeleteCommandDto>(cmd, cancellationToken));
        }
    }
}



`);
// ► -----  ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
		
]]>
	</operator>
	<operator id="" title="UI Forms" group="Devinux Javascript Form" description="" base="ui">
		<![CDATA[
// ► file(path,content);
// ► model {Name : '', Item : [ {Name : '' , TypeName : ''} ] };
// ► ns = Default Name Space
// ► -----  ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
file(`/app/pages/${model.Name}/${model.Name}.js`,`

import { DevinuxClientCommon, DevinuxClientComponentButton, DevinuxClientComponentButtons, DevinuxClientComponentField, DevinuxClientComponentForm, DevinuxClientComponentGrid, DevinuxClientComponentGridColumn, DevinuxClientComponentPage, DevinuxClientComponentPanel } from "../../../scripts/clientcomponent.js";
import Backend from "../backend.js";

export class ${model.Name}List extends DevinuxClientComponentPage {
    constructor(Id = '${model.Name}list') {
        super(Id, '${model.Name}طلاعات کاربران', 'fad fa-cogs');
        this.filter = {
            pagesize: 20,
            page: 1,
        }
        this.selection = undefined;
    }
    load() {
        let e = $(this.Root.e);
        let pcontainer = new DevinuxClientComponentPanel('Role-list-container').renderload(e).setFlex().setFlexRows().setFlexGap().setAbsolutePosition();
        {
            let pgrid = new DevinuxClientComponentPanel('Role-list-container-gridcontainer').renderload(pcontainer).setFlexCenter();
            {

                let pgridform = new DevinuxClientComponentForm('Role-list-container-grid-form').renderload(pgrid).setCaption('').setAbsolutePosition(true);
                {
                    let btnNew = new DevinuxClientComponentButton("btn-new").setCaption("جدید").setIcon("fal fa-plus")
                    let btnUpdate = new DevinuxClientComponentButton("btn-new").setCaption("ویرایش").setIcon("fal fa-edit")
                    let btnDelete = new DevinuxClientComponentButton("btn-new").setCaption("حذف").setIcon("fal fa-times")
                    let btnView = new DevinuxClientComponentButton("btn-new").setCaption("نمایش").setIcon("fal fa-search")
					btnNew.onEvent(DevinuxClientComponentButton._event_enum.click, () => {
						let newform = new ${model.Name}Info("new-${model.Name}", 0);
						newform.onEvent(DevinuxClientComponentPage._event_enum.dialogresult, () => {
							newform.close();
						    this.getTable();
						}).show(this, { width: "80%", height: "80%" });
					});
					btnUpdate.onEvent(DevinuxClientComponentButton._event_enum.click, () => {
						let editform = new ${model.Name}Info("edit-${model.Name}", this.selection.id,this.selection.name);
						editform.onEvent(DevinuxClientComponentPage._event_enum.dialogresult, () => {
							editform.close();
						    this.getTable();
						}).show(this, { width: "80%", height: "80%" });
					});
                    btnDelete.onEvent(DevinuxClientComponentButton._event_enum.click, () => {
                        let result = confirm("Want to delete ?");
                        if (result) {
                            let ci = DevinuxClientCommon.CreateTask();
                            Backend.admin_${model.Name}_delete(this.selection.id)
                            .setOk((ok) => {
                                this.findFirst("notify").addSuccess({msg: "عملیات حذف با موفقیت انجام شد"});
                            }).setError((e) => {
                                this.findFirst("notify").addError({ msg: e && e.msg || 'عملیات ناموفق انجام گردید' });
                            }).setDone((done) => {
                                this.getTable();
                                RBCommon.RemoveTask(ci);
                            }).send();
                        }
                    });
                    btnView.onEvent(DevinuxClientComponentButton._event_enum.click, () => {
                        // let pageshi = new RoleInfo("shi",this.selection.id,this.selection.roleName || '',true);
                        // pageshi.show(this, { width: "80%", height: "80%" });
                    });

                    let grid = new DevinuxClientComponentGrid('Role-list-container-gridcontainer-list').renderload(pgridform)
                        .addColumn(new DevinuxClientComponentGridColumn({ Fill: false, Caption: 'شناسه', Name: 'id', Id: 'id', Type: 'number', Value: (m) => m.id }))
${model.Items.map(m=>`
.addColumn(new DevinuxClientComponentGridColumn({ Fill: false, Caption: '${m.Name}', Name: '${m.Name}', Id: '${m.Name}', Type: 'string', Value: (m) => m.${m.Name.toLowerCase()} }))
`).join('')}
                        .setRowCheck((tr,r) => { })
                        .onEvent(DevinuxClientComponentGrid._event_enum.page, (p) => { this.filter.page = p; this.getTable(); })
                        .onEvent(DevinuxClientComponentGrid._event_enum.pagesize, (p) => { this.filter.page = 1; this.filter.pagesize = p; this.getTable(); })
                        .onEvent(DevinuxClientComponentGrid._event_enum.rowselect, (m) => { 
                            if (m) {
                                this.selection = m;
                                btnsConstraint.forEach((m) => m.setUnLock());
                            } else {
                                this.selection = undefined
                                btnsConstraint.forEach((m) => m.setLock());
                            }
                        });

                    let btnsNormal = [btnNew];
                    let btnsConstraint = [btnUpdate, btnDelete, btnView];
                    [...btnsNormal, ...btnsConstraint].forEach((m) => grid.addButton(m));

                    this.grid = grid;
                    this.getTable();
                }
            }
        }
    }
    getTable() {
        let _tid = DevinuxClientCommon.CreateTask();
        Backend.admin_${model.Name}_list({
            pageSize: this.filter.pagesize || 20,
            page: this.filter.page || 1
        })
            .setOk(ok => {
                this.grid
                    .setDataSource(ok.data)
                    .setPagination({ Page: this.filter.page, RowCount: ok.count, PageSize: this.filter.pagesize, Radius: 2 })
                    .print();})
            .setError(err => { console.log(err) })
            .setDone(done => { DevinuxClientCommon.RemoveTask(_tid); })
            .send();
    }
    render() {
        return $('<div class="page ${model.Name}-list"></div>');
    }
}
export class ${model.Name}Info extends DevinuxClientComponentPage {
    constructor(_id='${model.Name}info',${model.Name}id = 0,formtitle = '', readonly = false) {
        super(_id, ${model.Name}id && ${model.Name}id > 0 ? "ویرایش" + " " + formtitle : "${model.Name} جدید", ${model.Name}id && ${model.Name}id > 0 ? "fad fa-edit" : "fad fa-plus");
        this.info = {
            ...{
                readonly: readonly || false,
                id: ${model.Name}id,
            }
        };
        this.forms = [];
    }
    afterload() {
        let pc = new DevinuxClientComponentPanel("panel-container").renderload(this.Root.e).setAbsolutePosition().setFlex().setFlexRows();
        
        {
            let pccstart = new DevinuxClientComponentPanel("pc-formSection").renderload(pc).setFlexCenter();
            {
                let pccf = new DevinuxClientComponentForm("pcf-form").renderload(pccstart).makeResponsive();
                this.forms.push(pccf);

${model.Items.map(m=>`
                let inp_${m.Name} = new DevinuxClientComponentField("${m.Name}").renderload(pccf.Root.container).makeText({ caption: '${m.Name}', id: '${m.Name}', name: '${m.Name}' }).sizeAll(12);
                if (this.info.id > 0) { inp_${m.Name}.setValue(this.info.${m.Name.toLowerCase()}); }
                if (this.info.readonly) inp_${m.Name}.setReadonly();
`).join('')}
            }
            
            if (!this.info.readonly) {
                let pcb = new DevinuxClientComponentPanel("pc-buttonsSection").renderload(pc).setFlexEnd();
                {
                    let pcbb = new DevinuxClientComponentButtons("pcb-buttons").renderload(pcb);
                    {
                        let btnSave = new DevinuxClientComponentButton("btn-save").renderload(pcbb).setCaption("ذخیره و ارسال").setIcon("fad fa-save");
                        btnSave.onEvent(DevinuxClientComponentButton._event_enum.click, () => {
                            if (true) {
                                this.dialogresult = false;
                                let _f = this.forms[0].serialize();
                                if (this.info.id > 0) {
                                    // Call Api for Update
                                    Backend.admin_${model.Name}_update({
                                        ...this.info,
                                        ..._f
                                    })
                                        .setOk((ok) => { this.dialogresult = true; this.findFirst('notify').addSuccess({ msg: 'عملیات با موفقیت انجام شد' }); })
                                        .setError((err) => { })
                                        .setDone((done) => { this.normalState(); })
                                        .setSync()
                                        .send();
                                }
                                else {
                                    /// Call Api for Save
                                    Backend.admin_${model.Name}_insert({
                                            ...this.info,
                                            ..._f
                                        })
                                        .setOk((ok) => { this.dialogresult = true; this.findFirst('notify').addSuccess({ msg: 'عملیات با موفقیت انجام شد' }); })
                                        .setError((err) => { })
                                        .setDone((done) => { this.normalState(); })
                                        .setSync()
                                        .send();
                                }
                                this.doEvent(DevinuxClientComponentPage._event_enum.dialogresult, this.dialogresult);
                                this.close();
                            }
                        });
                    }
                }
            }
        }
    }
    load() {
        this.loadingState();
        if (this.info.id > 0) {
            Backend.admin_${model.Name}_select(this.info.id,
                (ok) => {
                    this.info = { ...this.info, ...ok.data };
                },
                (err) => { },
                (done) => {
                    this.afterload();
                    this.normalState();
                }
            )
                .setSync()
                .send();
        } else {
            this.afterload();
            this.normalState();
        }
    }
    render() {
        return $('<div class="page ${model.Name}-info"></div>');
    }
}
`);
]]>
	</operator>
	
</database>